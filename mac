#!/bin/bash

# Welcome to the Kickstarter laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

set -e

cat > ~/.ksr_functions.sh <<-"EOF"
# Helpful functions for the kickstarter laptop script:

# Print a status message with timestamp
print_status() {
  printf "[%s] %s ... " "$(date +%H:%M:%S)" "$@"
}

# Print a check to complete the status message
print_done() {
  printf "✅ \n"
}

# Print a happy green message
succeed() {
  printf "\n$(tput bold)$(tput setaf 2)%s$(tput sgr0)" "$@"
  printf "\n❤️  💛  💚  💙  💜 \n"
}

# Print a warning message
print_warning() {
  echo "⚠️  $(tput bold)$(tput setaf 1)$@$(tput sgr0) ⚠️ "
}

# Print a red error
print_error() {
  printf "$(tput bold)$(tput setaf 1)%s$(tput sgr0)\n" "$@" >&2
}

# Install the required version of Ruby
check_ruby_version() {
  print_status "Checking ruby version"
  rbenv_path=$(which rbenv)
  if ! $rbenv_path exec ruby -v > /dev/null 2>&1; then
    # Use the system readline so ruby doesn't break when the homebrew
    # readline version changes
    export RUBY_CONFIGURE_OPTS=--with-readline-dir="/usr/lib"
    $rbenv_path install "$(cat .ruby-version)"
  fi
  print_done
}

check_bundler_dependencies() {
  print_status "Checking bundler dependencies"
  # Install latest used version of bundler
  BUNDLER_VERSION=$(tail -n 1 Gemfile.lock | tr -d ' ')
  if ! bundle version 2>/dev/null |grep -Fq "$BUNDLER_VERSION"
  then
    gem install -q bundler -v "=$BUNDLER_VERSION" --no-ri --no-rdoc
  fi

  if ! bundle check >/dev/null
  then
    bundle install
  fi
  print_done
}
EOF

# shellcheck disable=SC1090
source ~/.ksr_functions.sh

tmp_output=$(mktemp -t tmp)
exit_message() {
  ret=$?
 if [ $ret -ne 0 ]; then
   if [ -e "$tmp_output" ]; then cat "$tmp_output"; fi
   printf "\n\n"
   print_error "Setup failed. 💔  "
   print_error "Try running this command again, or paste this output in #dev-environments Slack channel"
 fi
 rm -f "$tmp_output"
 exit $ret
}

# shellcheck disable=SC2154
trap exit_message EXIT

## Check for OS X >= 10.10, <=  10.12
if [ -n "$DANGER_ZONE" ]; then
  print_warning "Skipping check of macOS/OS X version. 😎  DANGER ZONE"
else
  if ! sw_vers -productVersion | grep -q "^10.1[0-2]"; then
    print_error "Unsupported OS X version. Please use macOS Sierra, El Capitan, or Yosemite."
    print_error "Or set DANGER_ZONE=1 to proceed anyway."
    exit 1
  fi
fi
##
# Detect if you're in a tmux session
if [ -n "$TMUX" ]; then
  print_error "👋  Hey, it looks like you're in a tmux session. Do you have reattach-to-user-namespace installed? If not, you're going to want to set that up before you proceed."
fi

## Make sure rvm isn't installed
if which rvm; then
  print_error "Please uninstall rvm before continuing"
  exit 1
fi

# XCode command-line tools
# From http://stackoverflow.com/a/15371967
while ! pkgutil --pkg-info=com.apple.pkg.CLTools_Executables > "$tmp_output" 2>&1; do

  if [ -z "$xcode_cli_installing" ]
  then
    print_status "Please install XCode command line tools in the pop-up window"
    xcode-select --install
    print_status "Waiting for XCode command line tools"
    xcode_cli_installing='yes'
  else
    sleep 1
  fi

done

##
# Check that FileVault is enabled.
#
# NB: we test this script on a VirtualBox machine, where it's difficult/impossible to enable FileVault.
# If the user is 'devbootstrapper' (our vbox test user), skip the FileVault check.
if [ "$USER" == "devbootstrapper" ]; then
  print_warning "Skipping FileVault check for bootstrapping tests."
else
  print_status "Checking FileVault"
  if ! fdesetup isactive > /dev/null; then
    print_error "You must enable FileVault to continue."
    exit 1
  fi
  print_done
fi

##
# Install & run Docker for Mac
if [ -n "$SKIP_DOCKER" ]; then
  # Add flag for folks who wish to opt out of pow.
  print_warning "Skipping Docker setup because 'SKIP_DOCKER' is set. YMMV."
else

  # Unset old boot2docker config
  unset DOCKER_CERT_PATH DOCKER_HOST DOCKER_IP DOCKER_TLS_VERIFY

  if ! [ -d "/Applications/Docker.app" ]
  then

    print_status "Installing Docker"
    docker_url=https://download.docker.com/mac/stable/Docker.dmg
    docker_dmg=/tmp/Docker.dmg
    docker_volume=/Volumes/Docker
    curl -s -o $docker_dmg $docker_url
    hdiutil attach $docker_dmg -nobrowse > /dev/null
    cp -a $docker_volume/Docker.app /Applications/
    hdiutil detach $docker_volume > /dev/null
    rm -f $docker_dmg
    print_done
  fi

  print_status "Ensuring Docker is running"
  if ! /usr/local/bin/docker ps > "$tmp_output" 2>&1
  then
    open /Applications/Docker.app
  fi
  print_done
fi

##
# Install homebrew
if ! command -v brew >/dev/null; then
  print_status "Installing Homebrew"
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  print_done
fi

# Workaround broken brew update from Aug 11
# https://github.com/Homebrew/homebrew-core#update-bug
# 1471233600 = Aug 15, 2016, after the issue.
brew_last_change=$(git --git-dir="$(brew --repo)"/.git log -n 1 --pretty=%at)
if [ "$brew_last_change" -le "1471233600" ]; then
  print_status "Fixing brew update bug"
  (cd "$(brew --repo)"; git fetch; git reset --hard origin/master; brew update) > /dev/null
  print_done
fi

# Fix permission issue on /usr/local on OS 10.12
if [ ! -w /usr/local ]; then
  print_status "Fixing /usr/local permissions issue"
  sudo chown -R "$(whoami)" /usr/local
  print_done
fi

print_status "Checking Homebrew formulae"
brew bundle --file=- > "$tmp_output" <<EOF
tap "homebrew/services" # For 'brew service'
tap "caskroom/cask" # For java

cask "java"

brew "awscli"
brew "git"
brew "jq"
brew "n"
brew "openssl"
brew "parallel"
brew "rbenv"
brew "ruby-build"
EOF

# Uninstall problematic brew packages
brew uninstall --force brew-cask 2> /dev/null
brew uninstall --force node 2> /dev/null
brew uninstall --force node4-lts 2> /dev/null

print_done

##
# Configure rbenv
if [ -n "$RBENV_ROOT" ] && [ "$RBENV_ROOT" != "${HOME}/.rbenv" ]; then
  print_warning "Warning: RBENV_ROOT is an unexpected value (${RBENV_ROOT}). YMMV."
fi
print_status "Initializing rbenv"
eval "$(rbenv init -)"
print_done

print_status "Checking Homebrew updater"
mkdir -p ~/Library/LaunchAgents
##
# Automatically run `brew update` every 2 hours
# This saves ~20 seconds on subsequent runs b/c we don't have to wait for `brew update`
cat > ~/Library/LaunchAgents/com.kickstarter.homebrew-updater.plist <<- EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>com.kickstarter.homebrew-updater</string>
    <key>ProgramArguments</key>
    <array>
    <string>/usr/local/bin/brew</string>
    <string>update</string>
    </array>

    <key>RunAtLoad</key>
    <true/>

    <key>StartInterval</key>
    <integer>7200</integer>
  </dict>
</plist>
EOF

launchctl unload ~/Library/LaunchAgents/com.kickstarter.homebrew-updater.plist 2> /dev/null
launchctl load   ~/Library/LaunchAgents/com.kickstarter.homebrew-updater.plist
print_done

##
# source ~/.ksr.rc from shell's rc file
cat > ~/.ksr.rc <<-"EOF"
# Kickstarter init commands provisioned by the laptop script.
# Changes will be overwritten.

# Initialize rbenv
eval "$(rbenv init -)"

if [[ ! "$PATH" =~ "/usr/local/bin" ]]; then
  export PATH="/usr/local/bin:$PATH"
fi

# Set a higher ulimit to avoid
# capistrano issues deploying to many servers
LIMIT=2048
if [ $LIMIT -gt "$(ulimit -n)" ]; then
  ulimit -n $LIMIT
fi
EOF

cmd='if [ -e ~/.ksr.rc ]; then source ~/.ksr.rc; fi # Provisioned by ksr laptop script'
case $(basename "$SHELL") in
  bash )
    profile="$HOME/.bashrc"

    # Source bashrc from bash_profile
    if ! grep -Fqs 'source ~/.bashrc' "$HOME/.bash_profile"; then
      echo 'source ~/.bashrc' >> "$HOME/.bash_profile"
    fi
    ;;
  zsh )
    profile="$HOME/.zshrc"
    ;;
  fish )
    profile="$HOME/.config/fish/config.fish"
    # Use a different command syntax
    cmd='if test -e ~/.config/fish/ksr.fish; source ~/.config/fish/ksr.fish; end # Provisioned by ksr laptop script'
    mkdir -p ~/.config/fish
    cat > ~/.config/fish/ksr.fish <<-"EOF"
# Kickstarter init commands provisioned by the laptop script.
# Changes will be overwritten.

# Initialize rbenv
status --is-interactive; and . (rbenv init -|psub)

if not echo "$PATH" |grep -Fq "/usr/local/bin"
  export PATH="/usr/local/bin:$PATH"
end

# Set a higher ulimit to avoid
# capistrano issues deploying to many servers
set LIMIT 2048
if test $LIMIT -gt (ulimit -n)
  ulimit -n $LIMIT
end
EOF
    ;;
  * )
    echo 'Unrecognized shell'
    ;;
esac

if ! grep -Fqs "$cmd" "$profile"; then
  print_status "Adding ksr config to $profile"

  # shellcheck disable=SC2059
  printf "\n$cmd\n" >> "$profile"
  print_done
fi

# Use osxkeychain for git https passwords
git config --global credential.helper osxkeychain

##
# Install Pow web server
# NB: we must install pow after the shell is configured with rbenv.
# See https://github.com/basecamp/pow/wiki/Troubleshooting#rbenv
if [ -n "$SKIP_POW" ]; then
  # Add flag for folks who wish to opt out of pow.
  print_warning "Skipping Pow setup because 'SKIP_POW' is set. YMMV."
else
  # Increase pow's default idle timeout to 1hr
  echo "export POW_TIMEOUT=3600" > ~/.powconfig
  print_status "Checking Pow web server"
  if  ! curl --fail -sH host:pow "127.0.0.1/status.json"  > /dev/null; then
    # Use custom install script until https://github.com/basecamp/pow/pull/505 is released
    # curl -s get.pow.cx | sh
    curl -s https://raw.githubusercontent.com/ktheory/pow/fix-launchctl-bootstrap/install.sh | sh
  fi
  print_done
fi

if [ -z "$SKIP_LAPTOP_SUCCESS" ]; then
  succeed "Laptop setup successful!"
fi
